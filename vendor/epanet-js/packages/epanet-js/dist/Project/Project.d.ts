import Workspace from 'Workspace/Workspace';
import { ProjectFunctions, NetworkNodeFunctions, HydraulicAnalysisFunctions, WaterQualityAnalysisFunctions, ReportingFunctions, AnalysisOptionsFunctions, NetworkLinkFunctions, TimePatternFunctions, DataCurveFunctions, SimpleControlFunctions, RuleBasedControlFunctions } from './functions';
interface MemoryTypes {
    int: number;
    long: number;
    double: number;
    char: string;
}
declare class Project implements ProjectFunctions, NetworkNodeFunctions, HydraulicAnalysisFunctions, WaterQualityAnalysisFunctions, ReportingFunctions, AnalysisOptionsFunctions, NetworkLinkFunctions, TimePatternFunctions, DataCurveFunctions, SimpleControlFunctions, RuleBasedControlFunctions {
    _ws: Workspace;
    _instance: EmscriptenModule;
    _EN: EpanetProject;
    constructor(ws: Workspace);
    _getValue<T extends keyof MemoryTypes>(pointer: number, type: T): MemoryTypes[T];
    _allocateMemory(v1: string): [number];
    _allocateMemory(v1: string, v2: string): [number, number];
    _allocateMemory(v1: string, v2: string, v3: string): [number, number, number];
    _allocateMemory(v1: string, v2: string, v3: string, v4: string): [number, number, number, number];
    _allocateMemory(v1: string, v2: string, v3: string, v4: string, v5: string): [number, number, number, number, number];
    _allocateMemory(v1: string, v2: string, v3: string, v4: string, v5: string, v6: string, v7: string): [number, number, number, number, number, number, number];
    _allocateMemoryForArray(arr: number[]): number;
    _checkError(errorCode: number): void;
    open: (this: Project, inputFile: string, reportFile: string, outputFile: string) => void;
    close: (this: Project) => void;
    runProject: (this: Project, inputFile: string, reportFile: string, outputFile: string) => void;
    init: (this: Project, rptFile: string, outFile: string, unitType: import("../enum/FlowUnits/FlowUnits").default, headLosstype: import("../enum/HeadLossType/HeadLossType").default) => void;
    getCount: (this: Project, obj: import("../enum/CountType/CountType").default) => number;
    getTitle: (this: Project) => {
        line1: string;
        line2: string;
        line3: string;
    };
    setTitle: (this: Project, line1: string, line2: string, line3: string) => void;
    saveInpFile: (this: Project, filename: string) => void;
    solveH: (this: Project) => void;
    useHydFile: (this: Project, filename: string) => void;
    openH: (this: Project) => void;
    initH: (this: Project, initFlag: import("../enum/InitHydOption/InitHydOption").default) => void;
    runH: (this: Project) => number;
    nextH: (this: Project) => number;
    saveH: (this: Project) => void;
    saveHydFile: (this: Project, filename: string) => void;
    closeH: (this: Project) => void;
    solveQ: (this: Project) => void;
    openQ: (this: Project) => void;
    initQ: (this: Project, initFlag: import("../enum/InitHydOption/InitHydOption").default.NoSave | import("../enum/InitHydOption/InitHydOption").default.Save) => void;
    runQ: (this: Project) => number;
    nextQ: (this: Project) => number;
    stepQ: (this: Project) => number;
    closeQ: (this: Project) => void;
    writeLine: (this: Project, line: string) => void;
    report: (this: Project) => void;
    copyReport: (this: Project, filename: string) => void;
    clearReport: (this: Project) => void;
    resetReport: (this: Project) => void;
    setReport: (this: Project, format: string) => void;
    setStatusReport: (this: Project, level: import("../enum/StatusReport/StatusReport").default) => void;
    getStatistic: (this: Project, type: import("../enum/AnalysisStatistic/AnalysisStatistic").default) => number;
    getResultIndex: (this: Project, type: import("../enum/ObjectType/ObjectType").default.Node | import("../enum/ObjectType/ObjectType").default.Link, index: number) => number;
    getFlowUnits: (this: Project) => import("../enum/FlowUnits/FlowUnits").default;
    getOption: (this: Project, option: import("../enum/Option/Option").default) => number;
    getQualityInfo: (this: Project) => {
        qualType: import("../enum/QualityType/QualityType").default;
        chemName: string;
        chemUnits: string;
        traceNode: number;
    };
    getQualityType: (this: Project) => {
        qualType: import("../enum/QualityType/QualityType").default;
        traceNode: number;
    };
    getTimeParameter: (this: Project, param: import("../enum/TimeParameter/TimeParameter").default) => number;
    setFlowUnits: (this: Project, units: import("../enum/FlowUnits/FlowUnits").default) => void;
    setOption: (this: Project, option: import("../enum/Option/Option").default, value: number) => void;
    setQualityType: (this: Project, qualType: import("../enum/QualityType/QualityType").default, chemName: string, chemUnits: string, traceNode: string) => void;
    setTimeParameter: (this: Project, param: import("../enum/TimeParameter/TimeParameter").default, value: number) => void;
    addNode: (this: Project, id: string, nodeType: import("../enum/NodeType/NodeType").default) => number;
    deleteNode: (this: Project, index: number, actionCode: import("../enum/ActionCodeType/ActionCodeType").default) => void;
    getNodeIndex: (this: Project, id: string) => number;
    getNodeId: (this: Project, index: number) => string;
    setNodeId: (this: Project, index: number, newid: string) => void;
    getNodeType: (this: Project, index: number) => import("../enum/NodeType/NodeType").default;
    getNodeValue: (this: Project, index: number, property: import("../enum/NodeProperty/NodeProperty").default) => number;
    setNodeValue: (this: Project, index: number, property: import("../enum/NodeProperty/NodeProperty").default, value: number) => void;
    setJunctionData: (this: Project, index: number, elev: number, dmnd: number, dmndpat: string) => void;
    setTankData: (this: Project, index: number, elev: number, initlvl: number, minlvl: number, maxlvl: number, diam: number, minvol: number, volcurve: string) => void;
    getCoordinates: (this: Project, index: number) => {
        x: number;
        y: number;
    };
    setCoordinates: (this: Project, index: number, x: number, y: number) => void;
    addDemand: (this: Project, nodeIndex: number, baseDemand: number, demandPattern: string, demandName: string) => void;
    deleteDemand: (this: Project, nodeIndex: number, demandIndex: number) => void;
    getBaseDemand: (this: Project, nodeIndex: number, demandIndex: number) => number;
    getDemandIndex: (this: Project, nodeIndex: number, demandName: string) => number;
    getDemandModel: (this: Project) => {
        type: import("../enum/DemandModel/DemandModel").default;
        pmin: number;
        preq: number;
        pexp: number;
    };
    getDemandName: (this: Project, nodeIndex: number, demandIndex: number) => string;
    getDemandPattern: (this: Project, nodeIndex: number, demandIndex: number) => number;
    getNumberOfDemands: (this: Project, nodeIndex: number) => number;
    setBaseDemand: (this: Project, nodeIndex: number, demandIndex: number, baseDemand: number) => void;
    setDemandModel: (this: Project, type: import("../enum/DemandModel/DemandModel").default, pmin: number, preq: number, pexp: number) => void;
    setDemandName: (this: Project, nodeIndex: number, demandIdx: number, demandName: string) => void;
    setDemandPattern: (this: Project, nodeIndex: number, demandIndex: number, patIndex: number) => void;
    addLink: (this: Project, id: string, linkType: import("../enum/LinkType/LinkType").default, fromNode: string, toNode: string) => number;
    deleteLink: (this: Project, index: number, actionCode: import("../enum/ActionCodeType/ActionCodeType").default) => void;
    getLinkIndex: (this: Project, id: string) => number;
    getLinkId: (this: Project, index: number) => string;
    setLinkId: (this: Project, index: number, newid: string) => void;
    getLinkType: (this: Project, index: number) => import("../enum/LinkType/LinkType").default;
    setLinkType: (this: Project, index: number, linkType: import("../enum/LinkType/LinkType").default, actionCode: import("../enum/ActionCodeType/ActionCodeType").default) => number;
    getLinkNodes: (this: Project, index: number) => {
        node1: number;
        node2: number;
    };
    setLinkNodes: (this: Project, index: number, node1: number, node2: number) => void;
    getLinkValue: (this: Project, index: number, property: import("../enum/LinkProperty/LinkProperty").default) => number;
    setLinkValue: (this: Project, index: number, property: number, value: number) => void;
    setPipeData: (this: Project, index: number, length: number, diam: number, rough: number, mloss: number) => void;
    getPumpType: (this: Project, index: number) => import("../enum/PumpType/PumpType").default;
    getHeadCurveIndex: (this: Project, linkIndex: number) => number;
    setHeadCurveIndex: (this: Project, linkIndex: number, curveIndex: number) => void;
    getVertexCount: (this: Project, index: number) => number;
    getVertex: (this: Project, index: number, vertex: number) => {
        x: number;
        y: number;
    };
    setVertices: (this: Project, index: number, x: number[], y: number[]) => void;
    addPattern: (this: Project, id: string) => void;
    deletePattern: (this: Project, index: number) => void;
    getPatternIndex: (this: Project, id: string) => number;
    getPatternId: (this: Project, index: number) => string;
    setPatternId: (this: Project, index: number, id: string) => void;
    getPatternLength: (this: Project, index: number) => number;
    getPatternValue: (this: Project, index: number, period: number) => number;
    setPatternValue: (this: Project, index: number, period: number, value: number) => void;
    getAveragePatternValue: (this: Project, index: number) => number;
    setPattern: (this: Project, index: number, values: number[]) => void;
    addCurve: (this: Project, id: string) => void;
    deleteCurve: (this: Project, index: number) => void;
    getCurveIndex: (this: Project, id: string) => number;
    getCurveId: (this: Project, index: number) => string;
    setCurveId: (this: Project, index: number, id: string) => void;
    getCurveLenth: (this: Project, index: number) => number;
    getCurveType: (this: Project, index: number) => import("../enum/CurveType/CurveType").default;
    getCurveValue: (this: Project, curveIndex: number, pointIndex: number) => {
        x: number;
        y: number;
    };
    setCurveValue: (this: Project, curveIndex: number, pointIndex: number, x: number, y: number) => void;
    setCurve: (this: Project, index: number, xValues: number[], yValues: number[]) => void;
    addControl: (this: Project, type: import("../enum/ControlType/ControlType").default, linkIndex: number, setting: number, nodeIndex: number, level: number) => number;
    deleteControl: (this: Project, index: number) => void;
    getControl: (this: Project, index: number) => {
        type: import("../enum/ControlType/ControlType").default;
        linkIndex: number;
        setting: number;
        nodeIndex: number;
        level: number;
    };
    setControl: (this: Project, index: number, type: import("../enum/ControlType/ControlType").default, linkIndex: number, setting: number, nodeIndex: number, level: number) => void;
    addRule: (this: Project, rule: string) => void;
    deleteRule: (this: Project, index: number) => void;
    getRule: (this: Project, index: number) => {
        premiseCount: number;
        thenActionCount: number;
        elseActionCount: number;
        priority: number;
    };
    getRuleId: (this: Project, index: number) => string;
    getPremise: (this: Project, ruleIndex: number, premiseIndex: number) => {
        logop: number;
        object: import("../enum/RuleObject/RuleObject").default;
        objIndex: number;
        variable: import("../enum/RuleVariable/RuleVariable").default;
        relop: import("../enum/RuleOperator/RuleOperator").default;
        status: import("../enum/RuleStatus/RuleStatus").default;
        value: number;
    };
    setPremise: (this: Project, ruleIndex: number, premiseIndex: number, logop: number, object: import("../enum/RuleObject/RuleObject").default, objIndex: number, variable: import("../enum/RuleVariable/RuleVariable").default, relop: import("../enum/RuleOperator/RuleOperator").default, status: import("../enum/RuleStatus/RuleStatus").default, value: number) => void;
    setPremiseIndex: (this: Project, ruleIndex: number, premiseIndex: number, objIndex: number) => void;
    setPremiseStatus: (this: Project, ruleIndex: number, premiseIndex: number, status: import("../enum/RuleStatus/RuleStatus").default) => void;
    setPremiseValue: (this: Project, ruleIndex: number, premiseIndex: number, value: number) => void;
    getThenAction: (this: Project, ruleIndex: number, actionIndex: number) => {
        linkIndex: number;
        status: import("../enum/RuleStatus/RuleStatus").default;
        setting: number;
    };
    setThenAction: (this: Project, ruleIndex: number, actionIndex: number, linkIndex: number, status: import("../enum/RuleStatus/RuleStatus").default, setting: number) => void;
    getElseAction: (this: Project, ruleIndex: number, actionIndex: number) => {
        linkIndex: number;
        status: import("../enum/RuleStatus/RuleStatus").default;
        setting: number;
    };
    setElseAction: (this: Project, ruleIndex: number, actionIndex: number, linkIndex: number, status: import("../enum/RuleStatus/RuleStatus").default, setting: number) => void;
    setRulePriority: (this: Project, index: number, priority: number) => void;
}
export default Project;
//# sourceMappingURL=Project.d.ts.map